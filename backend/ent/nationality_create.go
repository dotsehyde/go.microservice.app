// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BenMeredithConsult/locagri-apps/ent/nationality"
)

// NationalityCreate is the builder for creating a Nationality entity.
type NationalityCreate struct {
	config
	mutation *NationalityMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (nc *NationalityCreate) SetCreatedAt(t time.Time) *NationalityCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NationalityCreate) SetNillableCreatedAt(t *time.Time) *NationalityCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NationalityCreate) SetUpdatedAt(t time.Time) *NationalityCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NationalityCreate) SetNillableUpdatedAt(t *time.Time) *NationalityCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetName sets the "name" field.
func (nc *NationalityCreate) SetName(s string) *NationalityCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetCode sets the "code" field.
func (nc *NationalityCreate) SetCode(s string) *NationalityCreate {
	nc.mutation.SetCode(s)
	return nc
}

// Mutation returns the NationalityMutation object of the builder.
func (nc *NationalityCreate) Mutation() *NationalityMutation {
	return nc.mutation
}

// Save creates the Nationality in the database.
func (nc *NationalityCreate) Save(ctx context.Context) (*Nationality, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NationalityCreate) SaveX(ctx context.Context) *Nationality {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NationalityCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NationalityCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NationalityCreate) defaults() {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := nationality.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		v := nationality.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NationalityCreate) check() error {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Nationality.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Nationality.updated_at"`)}
	}
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Nationality.name"`)}
	}
	if _, ok := nc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Nationality.code"`)}
	}
	return nil
}

func (nc *NationalityCreate) sqlSave(ctx context.Context) (*Nationality, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NationalityCreate) createSpec() (*Nationality, *sqlgraph.CreateSpec) {
	var (
		_node = &Nationality{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(nationality.Table, sqlgraph.NewFieldSpec(nationality.FieldID, field.TypeInt))
	)
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(nationality.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(nationality.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(nationality.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.Code(); ok {
		_spec.SetField(nationality.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	return _node, _spec
}

// NationalityCreateBulk is the builder for creating many Nationality entities in bulk.
type NationalityCreateBulk struct {
	config
	err      error
	builders []*NationalityCreate
}

// Save creates the Nationality entities in the database.
func (ncb *NationalityCreateBulk) Save(ctx context.Context) ([]*Nationality, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Nationality, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NationalityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NationalityCreateBulk) SaveX(ctx context.Context) []*Nationality {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NationalityCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NationalityCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
