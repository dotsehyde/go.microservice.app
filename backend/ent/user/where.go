// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/BenMeredithConsult/locagri-apps/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// IDType applies equality check predicate on the "id_type" field. It's identical to IDTypeEQ.
func IDType(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDType, v))
}

// IDNumber applies equality check predicate on the "id_number" field. It's identical to IDNumberEQ.
func IDNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDNumber, v))
}

// IDPhoto applies equality check predicate on the "id_photo" field. It's identical to IDPhotoEQ.
func IDPhoto(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDPhoto, v))
}

// ProfilePhoto applies equality check predicate on the "profile_photo" field. It's identical to ProfilePhotoEQ.
func ProfilePhoto(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfilePhoto, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddress, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCity, v))
}

// Nationality applies equality check predicate on the "nationality" field. It's identical to NationalityEQ.
func Nationality(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNationality, v))
}

// CountryID applies equality check predicate on the "country_id" field. It's identical to CountryIDEQ.
func CountryID(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCountryID, v))
}

// IsWorker applies equality check predicate on the "is_worker" field. It's identical to IsWorkerEQ.
func IsWorker(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsWorker, v))
}

// IsVerified applies equality check predicate on the "is_verified" field. It's identical to IsVerifiedEQ.
func IsVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsVerified, v))
}

// IsBlocked applies equality check predicate on the "is_blocked" field. It's identical to IsBlockedEQ.
func IsBlocked(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsBlocked, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldReason, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhone, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRole, vs...))
}

// IDTypeEQ applies the EQ predicate on the "id_type" field.
func IDTypeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDType, v))
}

// IDTypeNEQ applies the NEQ predicate on the "id_type" field.
func IDTypeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIDType, v))
}

// IDTypeIn applies the In predicate on the "id_type" field.
func IDTypeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldIDType, vs...))
}

// IDTypeNotIn applies the NotIn predicate on the "id_type" field.
func IDTypeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIDType, vs...))
}

// IDTypeGT applies the GT predicate on the "id_type" field.
func IDTypeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldIDType, v))
}

// IDTypeGTE applies the GTE predicate on the "id_type" field.
func IDTypeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIDType, v))
}

// IDTypeLT applies the LT predicate on the "id_type" field.
func IDTypeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldIDType, v))
}

// IDTypeLTE applies the LTE predicate on the "id_type" field.
func IDTypeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIDType, v))
}

// IDTypeContains applies the Contains predicate on the "id_type" field.
func IDTypeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldIDType, v))
}

// IDTypeHasPrefix applies the HasPrefix predicate on the "id_type" field.
func IDTypeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldIDType, v))
}

// IDTypeHasSuffix applies the HasSuffix predicate on the "id_type" field.
func IDTypeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldIDType, v))
}

// IDTypeIsNil applies the IsNil predicate on the "id_type" field.
func IDTypeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldIDType))
}

// IDTypeNotNil applies the NotNil predicate on the "id_type" field.
func IDTypeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldIDType))
}

// IDTypeEqualFold applies the EqualFold predicate on the "id_type" field.
func IDTypeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldIDType, v))
}

// IDTypeContainsFold applies the ContainsFold predicate on the "id_type" field.
func IDTypeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldIDType, v))
}

// IDNumberEQ applies the EQ predicate on the "id_number" field.
func IDNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDNumber, v))
}

// IDNumberNEQ applies the NEQ predicate on the "id_number" field.
func IDNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIDNumber, v))
}

// IDNumberIn applies the In predicate on the "id_number" field.
func IDNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldIDNumber, vs...))
}

// IDNumberNotIn applies the NotIn predicate on the "id_number" field.
func IDNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIDNumber, vs...))
}

// IDNumberGT applies the GT predicate on the "id_number" field.
func IDNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldIDNumber, v))
}

// IDNumberGTE applies the GTE predicate on the "id_number" field.
func IDNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIDNumber, v))
}

// IDNumberLT applies the LT predicate on the "id_number" field.
func IDNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldIDNumber, v))
}

// IDNumberLTE applies the LTE predicate on the "id_number" field.
func IDNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIDNumber, v))
}

// IDNumberContains applies the Contains predicate on the "id_number" field.
func IDNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldIDNumber, v))
}

// IDNumberHasPrefix applies the HasPrefix predicate on the "id_number" field.
func IDNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldIDNumber, v))
}

// IDNumberHasSuffix applies the HasSuffix predicate on the "id_number" field.
func IDNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldIDNumber, v))
}

// IDNumberIsNil applies the IsNil predicate on the "id_number" field.
func IDNumberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldIDNumber))
}

// IDNumberNotNil applies the NotNil predicate on the "id_number" field.
func IDNumberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldIDNumber))
}

// IDNumberEqualFold applies the EqualFold predicate on the "id_number" field.
func IDNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldIDNumber, v))
}

// IDNumberContainsFold applies the ContainsFold predicate on the "id_number" field.
func IDNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldIDNumber, v))
}

// IDPhotoEQ applies the EQ predicate on the "id_photo" field.
func IDPhotoEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDPhoto, v))
}

// IDPhotoNEQ applies the NEQ predicate on the "id_photo" field.
func IDPhotoNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIDPhoto, v))
}

// IDPhotoIn applies the In predicate on the "id_photo" field.
func IDPhotoIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldIDPhoto, vs...))
}

// IDPhotoNotIn applies the NotIn predicate on the "id_photo" field.
func IDPhotoNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIDPhoto, vs...))
}

// IDPhotoGT applies the GT predicate on the "id_photo" field.
func IDPhotoGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldIDPhoto, v))
}

// IDPhotoGTE applies the GTE predicate on the "id_photo" field.
func IDPhotoGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIDPhoto, v))
}

// IDPhotoLT applies the LT predicate on the "id_photo" field.
func IDPhotoLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldIDPhoto, v))
}

// IDPhotoLTE applies the LTE predicate on the "id_photo" field.
func IDPhotoLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIDPhoto, v))
}

// IDPhotoContains applies the Contains predicate on the "id_photo" field.
func IDPhotoContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldIDPhoto, v))
}

// IDPhotoHasPrefix applies the HasPrefix predicate on the "id_photo" field.
func IDPhotoHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldIDPhoto, v))
}

// IDPhotoHasSuffix applies the HasSuffix predicate on the "id_photo" field.
func IDPhotoHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldIDPhoto, v))
}

// IDPhotoIsNil applies the IsNil predicate on the "id_photo" field.
func IDPhotoIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldIDPhoto))
}

// IDPhotoNotNil applies the NotNil predicate on the "id_photo" field.
func IDPhotoNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldIDPhoto))
}

// IDPhotoEqualFold applies the EqualFold predicate on the "id_photo" field.
func IDPhotoEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldIDPhoto, v))
}

// IDPhotoContainsFold applies the ContainsFold predicate on the "id_photo" field.
func IDPhotoContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldIDPhoto, v))
}

// ProfilePhotoEQ applies the EQ predicate on the "profile_photo" field.
func ProfilePhotoEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfilePhoto, v))
}

// ProfilePhotoNEQ applies the NEQ predicate on the "profile_photo" field.
func ProfilePhotoNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProfilePhoto, v))
}

// ProfilePhotoIn applies the In predicate on the "profile_photo" field.
func ProfilePhotoIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldProfilePhoto, vs...))
}

// ProfilePhotoNotIn applies the NotIn predicate on the "profile_photo" field.
func ProfilePhotoNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProfilePhoto, vs...))
}

// ProfilePhotoGT applies the GT predicate on the "profile_photo" field.
func ProfilePhotoGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldProfilePhoto, v))
}

// ProfilePhotoGTE applies the GTE predicate on the "profile_photo" field.
func ProfilePhotoGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProfilePhoto, v))
}

// ProfilePhotoLT applies the LT predicate on the "profile_photo" field.
func ProfilePhotoLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldProfilePhoto, v))
}

// ProfilePhotoLTE applies the LTE predicate on the "profile_photo" field.
func ProfilePhotoLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProfilePhoto, v))
}

// ProfilePhotoContains applies the Contains predicate on the "profile_photo" field.
func ProfilePhotoContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldProfilePhoto, v))
}

// ProfilePhotoHasPrefix applies the HasPrefix predicate on the "profile_photo" field.
func ProfilePhotoHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldProfilePhoto, v))
}

// ProfilePhotoHasSuffix applies the HasSuffix predicate on the "profile_photo" field.
func ProfilePhotoHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldProfilePhoto, v))
}

// ProfilePhotoIsNil applies the IsNil predicate on the "profile_photo" field.
func ProfilePhotoIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldProfilePhoto))
}

// ProfilePhotoNotNil applies the NotNil predicate on the "profile_photo" field.
func ProfilePhotoNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldProfilePhoto))
}

// ProfilePhotoEqualFold applies the EqualFold predicate on the "profile_photo" field.
func ProfilePhotoEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldProfilePhoto, v))
}

// ProfilePhotoContainsFold applies the ContainsFold predicate on the "profile_photo" field.
func ProfilePhotoContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldProfilePhoto, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAddress, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCity, v))
}

// NationalityEQ applies the EQ predicate on the "nationality" field.
func NationalityEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNationality, v))
}

// NationalityNEQ applies the NEQ predicate on the "nationality" field.
func NationalityNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNationality, v))
}

// NationalityIn applies the In predicate on the "nationality" field.
func NationalityIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNationality, vs...))
}

// NationalityNotIn applies the NotIn predicate on the "nationality" field.
func NationalityNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNationality, vs...))
}

// NationalityGT applies the GT predicate on the "nationality" field.
func NationalityGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNationality, v))
}

// NationalityGTE applies the GTE predicate on the "nationality" field.
func NationalityGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNationality, v))
}

// NationalityLT applies the LT predicate on the "nationality" field.
func NationalityLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNationality, v))
}

// NationalityLTE applies the LTE predicate on the "nationality" field.
func NationalityLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNationality, v))
}

// NationalityContains applies the Contains predicate on the "nationality" field.
func NationalityContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNationality, v))
}

// NationalityHasPrefix applies the HasPrefix predicate on the "nationality" field.
func NationalityHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNationality, v))
}

// NationalityHasSuffix applies the HasSuffix predicate on the "nationality" field.
func NationalityHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNationality, v))
}

// NationalityIsNil applies the IsNil predicate on the "nationality" field.
func NationalityIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNationality))
}

// NationalityNotNil applies the NotNil predicate on the "nationality" field.
func NationalityNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNationality))
}

// NationalityEqualFold applies the EqualFold predicate on the "nationality" field.
func NationalityEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNationality, v))
}

// NationalityContainsFold applies the ContainsFold predicate on the "nationality" field.
func NationalityContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNationality, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v Language) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v Language) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...Language) predicate.User {
	return predicate.User(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...Language) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLanguage, vs...))
}

// CountryIDEQ applies the EQ predicate on the "country_id" field.
func CountryIDEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCountryID, v))
}

// CountryIDNEQ applies the NEQ predicate on the "country_id" field.
func CountryIDNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCountryID, v))
}

// CountryIDIn applies the In predicate on the "country_id" field.
func CountryIDIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldCountryID, vs...))
}

// CountryIDNotIn applies the NotIn predicate on the "country_id" field.
func CountryIDNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCountryID, vs...))
}

// IsWorkerEQ applies the EQ predicate on the "is_worker" field.
func IsWorkerEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsWorker, v))
}

// IsWorkerNEQ applies the NEQ predicate on the "is_worker" field.
func IsWorkerNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsWorker, v))
}

// IsVerifiedEQ applies the EQ predicate on the "is_verified" field.
func IsVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsVerified, v))
}

// IsVerifiedNEQ applies the NEQ predicate on the "is_verified" field.
func IsVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsVerified, v))
}

// IsBlockedEQ applies the EQ predicate on the "is_blocked" field.
func IsBlockedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsBlocked, v))
}

// IsBlockedNEQ applies the NEQ predicate on the "is_blocked" field.
func IsBlockedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsBlocked, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldReason, v))
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
